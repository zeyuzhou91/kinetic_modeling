import numpy as npfrom scipy.optimize import curve_fitfrom scipy.signal import convolvefrom ..arterial import BloodInputfrom ..core import TACfrom .kineticmodel import BloodKineticModeldef model_without_VB(binput: BloodInput, K1: float, k2: float):            t = binput.frameschedule.mid_points        t_upsampled, dt = np.linspace(np.min(t), np.max(t), 2048, retstep=True)    # print(f't_upsampled: {t_upsampled}')    # print(f'dt: {dt}')        cp_upsampled = binput.CP(t_upsampled)        tac_upsampled = convolve(cp_upsampled, K1*np.exp(-k2 * t_upsampled), mode='full')[:len(t_upsampled)] * dt        tac = np.interp(t, t_upsampled, tac_upsampled)    return tacdef model_with_fixed_VB(binput: BloodInput, K1: float, k2: float):    """    VB : the fraction of blood volume out of the total tissue volume.     """        # If VB is fixed, it is usually 0.05    VB = 0.05        t = binput.frameschedule.mid_points        t_upsampled, dt = np.linspace(np.min(t), np.max(t), 2048, retstep=True)    # print(f't_upsampled: {t_upsampled}')    # print(f'dt: {dt}')        cp_upsampled = binput.CP(t_upsampled)        cb_upsampled = binput.CB(t_upsampled)        tac_upsampled = (1-VB)*convolve(cp_upsampled, K1*np.exp(-k2 * t_upsampled), mode='full')[:len(t_upsampled)] * dt + VB*cb_upsampled        tac = np.interp(t, t_upsampled, tac_upsampled)    return tacdef model_with_variable_VB(binput: BloodInput, K1: float, k2: float, VB: float):    """    VB : the fraction of blood volume out of the total tissue volume.     """            t = binput.frameschedule.mid_points        t_upsampled, dt = np.linspace(np.min(t), np.max(t), 2048, retstep=True)    # print(f't_upsampled: {t_upsampled}')    # print(f'dt: {dt}')        cp_upsampled = binput.CP(t_upsampled)        cb_upsampled = binput.CB(t_upsampled)        tac_upsampled = (1-VB)*convolve(cp_upsampled, K1*np.exp(-k2 * t_upsampled), mode='full')[:len(t_upsampled)] * dt + VB*cb_upsampled        tac = np.interp(t, t_upsampled, tac_upsampled)    return tacclass OneTCM_Model(BloodKineticModel):    def __init__(self,                  binput: BloodInput,                  tacs: TAC,                  fitting_func_type: str):                super().__init__(binput, tacs)                self.micro_params = {'K1': None,                            'k2': None,                            'VB': None}        self.macro_params = {'VD': None}        self.param_unit = {'K1': 'mL/min/mL',                            'k2': '/min',                            'VB': 'unitless',                            'VD': 'unitless'}                        self.fitting_func_type = fitting_func_type                            def fit(self):                K1_arr = np.zeros(self.tacs.num_elements)        k2_arr = np.zeros(self.tacs.num_elements)        VD_arr = np.zeros(self.tacs.num_elements)                if self.fitting_func_type == "without_VB":                        for i in range(self.tacs.num_elements):                            p0 = (1.0, 1.0)  # initial guess                 pars, _ = curve_fit(model_without_VB, self.binput, self.tacs.data[i,:], p0 = p0)                            K1, k2 = pars                                K1_arr[i] = K1                k2_arr[i] = k2                VD_arr[i] = K1/k2                    elif self.fitting_func_type == "with_fixed_VB":                        pass                elif self.fitting_func_type == "with_variable_VB":                        pass                            self.set_parameter('K1', K1_arr, 'micro')        self.set_parameter('k2', k2_arr, 'micro')        self.set_parameter('VD', VD_arr, 'macro')                return None            def generate_fitted_tacs(self):                fitted_tacs_data = np.zeros((self.tacs.num_elements, self.tacs.frameschedule.num_frames))                if self.fitting_func_type == "without_VB":                        for i in range(self.tacs.num_elements):                            K1 = self.get_parameter('K1')[i]                k2 = self.get_parameter('k2')[i]                                                fitted_tacs_data[i,:] = model_without_VB(self.binput, K1, k2)                        elif self.fitting_func_type == "with_fixed_VB":                        pass                elif self.fitting_func_type == "with_variable_VB":                        pass                        self.fitted_tacs = TAC(frameschedule = self.tacs.frameschedule,                               data = fitted_tacs_data,                               rois = self.tacs.rois,                               unit = self.tacs.unit,)                        return None            