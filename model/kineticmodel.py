import matplotlib.pyplot as pltfrom matplotlib.pyplot import cmimport numpy as npimport csvfrom ..typing_utils import NumpyRealNumberArrayfrom ..arterial import BloodInputfrom ..core import TACclass KineticModel:        tacs: TAC    fitted_tacs: TAC    micro_params: dict[str, NumpyRealNumberArray]    macro_params: dict[str, NumpyRealNumberArray]    param_unit: str    def __init__(self, tacs: TAC) -> None:                self.tacs = tacs        self.fitted_tacs = None        self.micro_params = {}        self.macro_params = {}        self.param_unit = {}                    def get_parameter(self,                       param_name: str,                      ) -> NumpyRealNumberArray:                if param_name in self.micro_params:            param_vector = self.micro_params[param_name]                elif param_name in self.macro_params:            param_vector = self.macro_params[param_name]                    else:                        raise ValueError("f{param_name} not found")                    return param_vector            def set_parameter(self,                       param_name: str,                      param: NumpyRealNumberArray,                      param_type: str,                      ) -> None:                if param_type == 'micro':            if param_name in self.micro_params:                self.micro_params[param_name] = param            else:                raise ValueError(f"self.micro_params does not have {param_name}")                    elif param_type == "macro":            if param_name in self.macro_params:                self.macro_params[param_name] = param            else:                raise ValueError(f"self.macro_params does not have {param_name}")                    return None            def print_params(self):                print('micro-parameters:')        for param, value in self.micro_params.items():            print(f'{param} = {value}')                print('macro-parameters:')        for param, value in self.macro_params.items():            print(f'{param} = {value}')                return None    def plot_tac_and_fitted_tac(self,                                opfile_path: str | None = None) -> None:                colors = cm.rainbow(np.linspace(0, 1, self.tacs.num_elements))                ts = self.tacs.frameschedule.mid_points                plt.figure()        for i in range(self.tacs.num_elements):            color = colors[i].reshape(1,-1)                        ys = self.tacs.data[i,:]            fitted_ys = self.fitted_tacs.data[i,:]                    if self.tacs.rois is not None:                ROIname = self.tacs.rois[i].name            else:                ROIname = None                    plt.scatter(ts, ys, c=color)            plt.plot(ts, fitted_ys, c=color, label=ROIname)                plt.xlabel(f't ({self.tacs.frameschedule.unit})')        plt.ylabel(f'{self.tacs.unit}')        plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))        plt.grid()        plt.savefig(opfile_path, bbox_inches="tight", dpi=300)        plt.show()                return None            def export_params(self, opfile_path: str) -> None:        """        Export kinetic modeling parameters to an csv file.         """                header_row = ['Tissue']        unit_row = ['']                for par in self.micro_params.keys():            header_row.append(par)            unit_row.append(self.param_unit[par])                    for par in self.macro_params.keys():            header_row.append(par)            unit_row.append(self.param_unit[par])                                                # Writing to CSV file        with open(opfile_path, 'w', newline='') as csvfile:            # Create a CSV writer object            csv_writer = csv.writer(csvfile)                            # Write the header row            csv_writer.writerow(header_row)                        # Write the unit row            csv_writer.writerow(unit_row)                        for i in range(self.tacs.num_elements):                tissue_params = []                                for par in self.micro_params.keys():                    if self.micro_params[par] is not None:                        tissue_params.append(self.micro_params[par][i])                    else:                        tissue_params.append(None)                                    for par in self.macro_params.keys():                    if self.macro_params[par] is not None:                        tissue_params.append(self.macro_params[par][i])                    else:                        tissue_params.append(None)                                row = [self.tacs.rois[i].name] + tissue_params                csv_writer.writerow(row)                        return Noneclass BloodKineticModel(KineticModel):        def __init__(self,                 binput: BloodInput,                 tacs: TAC) -> None:            super().__init__(tacs)        self.binput = binput            class ReferenceKineticModel(KineticModel):        def __init__(self,                 reftac: TAC,                 tacs: TAC) -> None:                super().__init__(tacs)        self.reftac = reftac