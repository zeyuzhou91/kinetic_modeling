import numpy as npfrom scipy.optimize import curve_fitfrom scipy.signal import convolvefrom ..arterial import BloodInputfrom ..core import TACfrom .kineticmodel import BloodKineticModeldef model_without_VB(binput: BloodInput, K1: float, k2: float, k3: float, k4: float):            t = binput.frameschedule.mid_points        g = k2+k3+k4    q = 4*k2*k4    p = np.sqrt(g**2-q)    r = K1/p    c = (g-p)/2.0    d = (g+p)/2.0    a = r*(k3+k4-c)    b = r*(d-k3-k4)        t_upsampled, dt = np.linspace(np.min(t), np.max(t), 2048, retstep=True)    # print(f't_upsampled: {t_upsampled}')    # print(f'dt: {dt}')        cp_upsampled = binput.CP(t_upsampled)            tac_upsampled = convolve(cp_upsampled, a*np.exp(-c * t_upsampled) + b*np.exp(-d * t_upsampled), mode='full')[:len(t_upsampled)] * dt        tac = np.interp(t, t_upsampled, tac_upsampled)    return tacclass TwoTCM_Model(BloodKineticModel):    def __init__(self,                  binput: BloodInput,                  tacs: TAC,                  fitting_func_type: str):                super().__init__(binput, tacs)                self.micro_params = {'K1': None,                            'k2': None,                            'k3': None,                            'k4': None,                            'VB': None}        self.macro_params = {'VND': None,                            'VS': None,                            'VT': None,                            'BPND': None}        self.param_unit = {'K1': 'mL/min/mL',                           'k2': '/min',                           'k3': '/min',                           'k4': '/min',                           'VB': 'unitless',                           'VND': 'unitless',                           'VS': 'unitless',                           'VT': 'unitless',                           'BPND': 'unitless'}                        self.fitting_func_type = fitting_func_type    def fit(self):                K1_arr = np.zeros(self.tacs.num_elements)        k2_arr = np.zeros(self.tacs.num_elements)        k3_arr = np.zeros(self.tacs.num_elements)        k4_arr = np.zeros(self.tacs.num_elements)                VND_arr = np.zeros(self.tacs.num_elements)        VS_arr = np.zeros(self.tacs.num_elements)        VT_arr = np.zeros(self.tacs.num_elements)        BPND_arr = np.zeros(self.tacs.num_elements)                if self.fitting_func_type == "without_VB":                        for i in range(self.tacs.num_elements):                            p0 = (1.0, 1.0, 1.0, 1.0)  # initial guess                 pars, _ = curve_fit(model_without_VB, self.binput, self.tacs.data[i,:], p0 = p0)                            K1, k2, k3, k4 = pars                                K1_arr[i] = K1                k2_arr[i] = k2                k3_arr[i] = k3                k4_arr[i] = k4                                VND_arr[i] = K1/k2                VS_arr[i] = K1*k3/(k2*k4)                VT_arr[i] = K1/k2*(1+k3/k4)                BPND_arr[i] = k3/k4                    elif self.fitting_func_type == "with_fixed_VB":                        pass                elif self.fitting_func_type == "with_variable_VB":                        pass                            self.set_parameter('K1', K1_arr, 'micro')        self.set_parameter('k2', k2_arr, 'micro')        self.set_parameter('k3', k3_arr, 'micro')        self.set_parameter('k4', k4_arr, 'micro')                self.set_parameter('VND', VND_arr, 'macro')        self.set_parameter('VS', VS_arr, 'macro')        self.set_parameter('VT', VT_arr, 'macro')        self.set_parameter('BPND', BPND_arr, 'macro')                return None            def generate_fitted_tacs(self):                fitted_tacs_data = np.zeros((self.tacs.num_elements, self.tacs.frameschedule.num_frames))                if self.fitting_func_type == "without_VB":                        for i in range(self.tacs.num_elements):                            K1 = self.get_parameter('K1')[i]                k2 = self.get_parameter('k2')[i]                k3 = self.get_parameter('k3')[i]                k4 = self.get_parameter('k4')[i]                                                fitted_tacs_data[i,:] = model_without_VB(self.binput, K1, k2, k3, k4)                        elif self.fitting_func_type == "with_fixed_VB":                        pass                elif self.fitting_func_type == "with_variable_VB":                        pass                        self.fitted_tacs = TAC(frameschedule = self.tacs.frameschedule,                               data = fitted_tacs_data,                               rois = self.tacs.rois,                               unit = self.tacs.unit,)                        return None