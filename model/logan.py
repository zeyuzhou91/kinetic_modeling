import matplotlib.pyplot as pltimport numpy as npfrom scipy.stats import linregressfrom collections.abc import Callablefrom numpy.typing import NDArrayfrom ..core import ROIfrom ..tool import auxclass Logan_Model():    def __init__(self):        self.name = 'Logan_Model'        self.params = {'K': None,                        'intercept': None,                       'tstart': None}        def print_params(self):                for param, value in self.params.items():            print(f'{param} = {value}')                return None                def tail_linregress(xs: NDArray, ys: NDArray) -> (float, float, int):    """    Find the best linear fit of the tail of the given data.         Assume the data (ys vs xs) is generally increasing, either concave of convex,     not of some bizarre shape.     """        MAX_ERR = 0.1    N = len(xs)        for i in range(N-1):        xss = xs[i:]        yss = ys[i:]        #M = len(xss)                res = linregress(xss, yss)            K = res.slope        V = res.intercept            yest = K * xss + V                # mean absolute percentage error        mape = np.mean(np.abs((yest - yss) / yss))                if mape < MAX_ERR:            break                #print(f'i = {i}, M = {M}, MAPE = {mape}')        return K, V, i        def fit(cp: Callable[[float], float],         roi: ROI,         t: NDArray,        fit_t0 : bool,         showNsave_plot : bool,        t0: float | None=None,         cb: Callable[[float], float] | None=None,        VB_fixed: float | None=None) -> None:    """    cp : function of t. The arterial input function, the plasma activity concentration after metabolite correction.          t in [min], output in [kBq/mL]    roi : ROI object.    t : frame mid points.     fit_t0 : True - fit variable t0; False - do not fit.     showNsave_plot :     t0 : (optional) the start time (in min) of the linear regression. Note: this is the actual time, not the normalized time.     cb : (optional) function of t. The whole blood activity concentration.     VB_fixed : (optional) the FIXED fraction of blood volume out of the total tissue volume     """            # sampled cp    cps = cp(t)        # tissue concentration, sampled at frame mid points    cts = roi.avg_intensity        # cps and cts must be sampled at the same time points, i.e. they are of the same length N            # blood activity correction (if needed)    if cb != None and VB_fixed != None:        # sampled cb        cbs = cb(t)                # correction        cts = (cts - VB_fixed * cbs) / (1-VB_fixed)        # integral of cps    intcps = aux.discrete_integrate(cps, t)  # len = N-1        # integral of cts    intcts = aux.discrete_integrate(cts, t)  # len = N-1           # dependent variable for liner regression, LHS    ys = intcts / cts[1:]   # len = N-1        # independent variable for linear regression, RHS    xs = intcps / cts[1:]   # len = N-1        ts = t[1:]  # len = N-1        if (not fit_t0) and (t0 != None):        # t0 is given, do not fit it                # i0: index of the time points in ts that is the closest to t0        i0 = np.argmin(np.abs(ts - t0))                res = linregress(xs[i0:], ys[i0:])        K = res.slope        intercept = res.intercept        elif fit_t0:        # t0 is not given, need to fit it                K, intercept, i0 = tail_linregress(xs, ys)                # find t0        t0 = ts[i0]                roi.m = Logan_Model()    roi.m.params['K'] = K    roi.m.params['intercept'] = intercept    roi.m.params['tstart'] = t0            if showNsave_plot:        plt.figure()        plt.scatter(xs[:i0], ys[:i0], facecolors='none', edgecolors='blue')        plt.scatter(xs[i0:], ys[i0:], facecolors='blue', edgecolors='blue')        xss = xs[i0:]        yest = K * xss + intercept        plt.plot(xss, yest, c='blue')        plt.xlabel(r'$\int_0^t C_P(\tau) \, d\tau / C_T(t)$')        plt.ylabel(r'$\int_0^t C_T(\tau) \, d\tau / C_T(t)$')        plt.title(f'Logan plot - {roi.name}')        plt.savefig(f'logan_{roi.name}.png')        plt.show()        plt.close()        return None