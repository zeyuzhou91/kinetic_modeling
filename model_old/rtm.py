import matplotlib.pyplot as pltimport numpy as npfrom scipy.optimize import curve_fitfrom scipy.signal import convolvefrom collections.abc import Callablefrom numpy.typing import NDArrayfrom ..core import ROIclass RTM_Model():    def __init__(self):        self.name = 'RTM_Model'        self.params = {'R1': None,                        'k2': None,                        'k3': None,                       'BPND': None,                       'k4': None}                # The fitted function for the measured tissue activity concentration        # Callable: np.darray -> np.darray        # Input: reference tissue tac        self.CT_fitted = None                      def print_params(self):                for param, value in self.params.items():            print(f'{param} = {value}')                return None                        def fit(ref: ROI,         roi: ROI,         t: NDArray) -> None:    """    ref : the reference tissue    roi : the target tissue    t : frame mid points.     """                def model(reftac: NDArray, R1, k2, k3, BPND):        """        reftac : reference tissue tac        R1 : K1/K1p        BPND : k3/k4        """                    k4 = k3/BPND                g = k2+k3+k4        q = 4*k2*k4        p = np.sqrt(g**2-q)        r = k2/R1        c = (g+p)/2.0        d = (g-p)/2.0        a = (k3+k4-c)*(c-r)/p        b = (d-k3-k4)*(d-r)/p                t_upsampled, dt = np.linspace(np.min(t), np.max(t), 2048, retstep=True)                reftac_upsampled = np.interp(t_upsampled, t, reftac)                conv_upsampled = convolve(reftac_upsampled, a*np.exp(-c * t_upsampled) + b*np.exp(-d * t_upsampled), mode='full')[:len(t_upsampled)] * dt                tac_upsampled = R1 * (reftac_upsampled + conv_upsampled)                tac = np.interp(t, t_upsampled, tac_upsampled)                 return tac            reftac = ref.avg_intensity     roitac = roi.avg_intensity  # np.darray    roi.m = RTM_Model()        pars, _ = curve_fit(model, reftac, roitac)    roi.m.CT_fitted = lambda reftac: model(reftac, *pars)    R1, k2, k3, BPND = pars        roi.m.params['R1'] = R1    roi.m.params['k2'] = k2    roi.m.params['k3'] = k3    roi.m.params['BPND'] = BPND        k4 = k3 / BPND    roi.m.params['k4'] = k4    return None