"""Functions related to fitting. """import aux  import matplotlib.pyplot as pltfrom scipy.optimize import curve_fitimport numpy as np# zero_linear_3exp# zero_4expif __name__ == "__main__":        t_data, pconc_data = aux.read_from_csv_twocols('/Users/zeyuzhou/Documents/kinetic_modeling/test/plasma_tac.csv')        # plt.figure(1)    # plt.plot(t, c, '-o', label='data')    # plt.xlabel('time (min)')    # plt.ylabel('Arterial Plasma Activity Concentration (Bq/mL)')    # plt.xlim([0, 4])    # plt.legend()    # plt.show()            # def myfun(x):    #     return ((x<0) * (-x) + ((x>=0)&(x<1)) * x + (x>=1) * 1.0)                # a = 2.    # b = -2.    # Tpeak = 3    # A1 = 3.0    # lamb1 = 0.2    # A2 = 0.6    # lamb2 = 0.01    # lamb3 = 0.001        def zero_linear_3exp(t, a, b, Tpk, A1, lamb1, A2, lamb2, lamb3):        """        Source: http://www.turkupetcentre.net/petanalysis/input_fitting_exp.html        Parameters        ----------        t : TYPE            DESCRIPTION.        a : TYPE            DESCRIPTION.        b : TYPE            DESCRIPTION.        Tpk : TYPE            DESCRIPTION.        A1 : TYPE            DESCRIPTION.        lamb1 : TYPE            DESCRIPTION.        A2 : TYPE            DESCRIPTION.        lamb2 : TYPE            DESCRIPTION.        lamb3 : TYPE            DESCRIPTION.        Returns        -------        TYPE            DESCRIPTION.        """                        #A3 = a * Tpk + b - (A1 + A2)        return (            ((t>=0)&(t<-b/a)) * 0  +              ((t>=-b/a)&(t<Tpk)) * (a * t + b) +             (t>=Tpk) * (A1*np.exp(-lamb1*(t-Tpk)) + A2*np.exp(-lamb2*(t-Tpk)) + (a*Tpk+b-(A1+A2))*np.exp(-lamb3*(t-Tpk))) )            # t = np.linspace(0,100,1000)    # y = zero_linear_3exp(t, a, b, Tpeak, A1, lamb1, A2, lamb2, lamb3)                # def func(x, a, b, c):    #     return a * np.exp(-b * x) + c    # xdata = np.linspace(0, 40, 50)    # y = func(xdata, 2.5, 1.3, 0.5)    # rng = np.random.default_rng()    # y_noise = 0.2 * rng.normal(size=xdata.size)    # ydata = y + y_noise    # plt.plot(xdata, ydata, 'b-', label='data')    popt, pcov = curve_fit(zero_linear_3exp, t_data, pconc_data)    #print(popt)    # plt.plot(xdata, func(xdata, *popt), 'r-', label='fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt))    # plt.legend()        ts = np.linspace(0, max(t_data) + 20, 1000)    pconc_fit = zero_linear_3exp(ts, *popt)        plt.figure(2)    plt.scatter(t_data, pconc_data, label='data')    plt.plot(ts, pconc_fit, 'r-', label='fit')    plt.xlabel('Time (min)')    plt.ylabel('Plasma Activity Concentration (Bq/mL)')    plt.xlim([0, 50])    plt.legend()    plt.show()        a = popt[0]    b = popt[1]    Tpk = popt[2]    A1 = popt[3]    lamb1 = popt[4]    A2 = popt[5]    lamb2 = popt[6]    A3 = a*Tpk+b-(A1+A2)    lamb3 = popt[7]    print(f'a = {a}')    print(f'b = {b}')    print(f'-b/a = {-b/a}')    print(f'Tpk = {Tpk}')    print(f'A1 = {A1}')    print(f'lamb1 = {lamb1}')    print(f'A2 = {A2}')    print(f'lamb2 = {lamb2}')    print(f'A3 = {A3}')    print(f'lamb3 = {lamb3}')            print(f'\nAt t = 150, fit = {zero_linear_3exp(150, *popt)}')            