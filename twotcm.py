import matplotlib.pyplot as pltimport numpy as npfrom scipy.optimize import curve_fitfrom scipy.signal import convolvedef fit(aif, ROI, FS):        """    aif: function of t        The arterial input function, t in [min], output in [kBq/mL]        ROI: ROI object        FS: FrameSchedule object    """        tac = np.array(ROI.avg_intensity)  # list        t = np.array(FS.mid_points) # list        def model(t, K1, k2, k3, k4):        # t must be an array                g = k2+k3+k4        q = 4*k2*k4        p = np.sqrt(g**2-q)        r = K1/p        c = (g-p)/2.0        d = (g+p)/2.0        a = r*(k3+k4-c)        b = r*(d-k3-k4)                t_upsampled, step = np.linspace(np.min(t), np.max(t), 2048, retstep=True)        # print(f't_upsampled: {t_upsampled}')        # print(f'step: {step}')                aif_upsampled = aif(t_upsampled)                tac_upsampled = convolve(aif_upsampled, a*np.exp(-c * t_upsampled) + b*np.exp(-d * t_upsampled), mode='full')[:len(t_upsampled)] * step                tac = np.interp(t, t_upsampled, tac_upsampled)                return tac        params, _ = curve_fit(model, t, tac)    K1, k2, k3, k4 = params      ROI.onetcm_params['K1'] = K1    ROI.onetcm_params['k2'] = k2    ROI.onetcm_params['k3'] = k3    ROI.onetcm_params['k4'] = k4    ROI.onetcm_params['VND'] = K1/k2    ROI.onetcm_params['VT'] = K1/k2*(1+k3/k4)    ROI.onetcm_params['VS'] = K1*k3/(k2*k4)    ROI.onetcm_params['BPND'] = k3/k4            ts = np.linspace(0, np.max(t)*1.1, 1000)    tacs = model(ts, *params)        return ts, tacs